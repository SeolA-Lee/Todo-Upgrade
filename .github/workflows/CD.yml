name: TodoUpgrade CD

# main 브랜치에 push(merge) 했을 때
on:
  push:
    branches:
      - main

# 테스트 결과 작성을 위해 쓰기권한 추가
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # JDK 세팅
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## CD
      # test를 제외한 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 도커 빌드 & 이미지 push
      - name: Docker build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/todo-update .
          docker push ${{ secrets.DOCKER_REPO }}/todo-update

      #docker-compose 파일을 ec2 서버에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            cd /home/ubuntu
            sudo touch .env
            echo "${{ secrets.ENV_VARS }}" | sudo tee .env > /dev/null

            sudo docker-compose stop
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/todo-update
            sudo docker pull mysql:8.0
            docker-compose -f docker-compose.yaml --env-file ./.env up -d
            docker image prune -f